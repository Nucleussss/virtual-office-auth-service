
services:
  migrations:
    build:  
      context: .
      dockerfile: Dockerfile.migration
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL_MODE=disable

    entrypoint: ["/bin/sh"]
    command: >
     -c "
      echo 'Waiting for PostgreSQL...' &&
      until pg_isready -h $$DB_HOST -p $$DB_PORT -U $$DB_USER -d $$DB_NAME;
      do sleep 2; done &&
      echo 'PostgreSQL is ready. Running migrations...' &&
      migrate -path /migrations -database "postgresql://$$DB_USER:$$DB_PASSWORD@$$DB_HOST:$$DB_PORT/$$DB_NAME?sslmode=$$DB_SSL_MODE" up
      "    
    networks:
      - auth_db_network  # Same network as PostgreSQL
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

  auth-services:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL_MODE=${DB_SSL_MODE}
    networks:
      - auth_db_network  # Same network as PostgreSQL
    depends_on:
      migrations:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    volumes: 
    - ./.env:/app/.env

  postgres:
    image: postgres:14-alpine
    networks:
      - auth_db_network  # Private network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
        - postgres-data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    networks:
      - auth_db_network  # Same network as PostgreSQL
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"  # Only pgAdmin is exposed
    depends_on:
      postgres :
        condition: service_healthy

networks:
  auth_db_network:  # Same network as PostgreSQL
    driver: bridge
    # internal: true  # Blocks external access
    
volumes:
  postgres-data: